def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.logicDev.taxi_line_driver"
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        ndk {
            abiFilters 'x86'
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {


    // // (Java only)
    // implementation("androidx.work:work-runtime:2.8.0-alpha01")

    // // Kotlin + coroutines
    // implementation("androidx.work:work-runtime-ktx:2.8.0-alpha01")

    // // optional - RxJava2 support
    // implementation("androidx.work:work-rxjava2:2.8.0-alpha01")

    // // optional - GCMNetworkManager support
    // implementation("androidx.work:work-gcm:2.8.0-alpha01")

    // // optional - Test helpers
    // androidTestImplementation("androidx.work:work-testing:2.8.0-alpha01")

    // // optional - Multiprocess support
    // implementation "androidx.work:work-multiprocess:2.8.0-alpha01"
    // implementation 'androidx.work:work-runtime-ktx:2.8.0-alpha01'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.10"
    implementation platform('com.google.firebase:firebase-bom:29.2.0')
    implementation 'com.google.firebase:firebase-analytics'
}
